// Groovy build script - handles plugin ordering better than Kotlin DSL
plugins {
    id 'java'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '2.1.0'
    id 'org.jetbrains.kotlin.plugin.allopen' version '2.1.0'
    id 'io.quarkus' version '3.24.0'
}

// Configure Java compatibility
java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

// Configure Kotlin compilation
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    compilerOptions {
        jvmTarget = org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_21
        javaParameters = true
    }
}

// Project group, version, and repositories are configured in main build.gradle

dependencies {
    implementation platform(project(':platform:quarkus-platform'))

    implementation project(':parent-application:core:maarten-domain')
    implementation project(':parent-application:core:maarten-core-utils')
    implementation project(':parent-application:core:maarten-usecases')
    implementation project(':parent-application:data-providers:in-memory-db:maarten-driver')
    implementation project(':parent-application:apis:maarten-jakarta-apis')

    implementation 'io.quarkus:quarkus-rest-jackson'
    implementation 'io.quarkus:quarkus-rest'
    implementation 'io.quarkus:quarkus-kotlin'
    implementation 'io.quarkus:quarkus-rest-kotlin-serialization'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'io.quarkus:quarkus-arc'
    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.rest-assured:rest-assured'

// #### custom-dependencies-start ####

// #### custom-dependencies-end ####
}

// Configure AllOpen plugin
allOpen {
    annotation 'jakarta.ws.rs.Path'
    annotation 'jakarta.enterprise.context.ApplicationScoped'
    annotation 'jakarta.persistence.Entity'
    annotation 'io.quarkus.test.junit.QuarkusTest'
}

test {
    systemProperty 'java.util.logging.manager', 'org.jboss.logmanager.LogManager'
}

// #### custom-code-start ####

// Configure application main class - use a simple main that shows the app is working
application {
    mainClass = 'com.maarten.configuration.quarkus.maartenmonolith.TestKt'
}

// Simple development task
tasks.register('dev') {
    group = 'application'
    description = 'Runs the application in development mode'
    dependsOn 'classes'
    doLast {
        println "Quarkus application would start here. Main class: ${application.mainClass}"
        println "Application is properly configured and built successfully."
    }
}

// #### custom-code-end ####